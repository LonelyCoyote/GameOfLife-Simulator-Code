/***********************************************************************************************************************
***********************************************************************************************************************/

using System;
using System.Drawing;
using DDBDrawingLib;

namespace GameOfLifeSim
{
  /*********************************************************************************************************************
  *********************************************************************************************************************/
  internal sealed class Cell
  {
    private const float size=0.1f;
    private const float square_size=size*0.8f;
    private readonly Color cellColor;
    
    public int x;
    public int y;
    private readonly float left;
    private readonly float top;
    
    /*******************************************************************************************************************
    *******************************************************************************************************************/
    public Cell(int _x,int _y)
    {
      x=_x;
      y=_y;
      MarkedForDeath=false;
      left=x*size;
      top=y*size;
      cellColor=Color.DeepSkyBlue;
    }

    /*******************************************************************************************************************
    *******************************************************************************************************************/
    public Cell(int _x,int _y,Color c)
    {
      x=_x;
      y=_y;
      MarkedForDeath=false;
      left=x*size;
      top=y*size;
      cellColor=c;
    }

    /*******************************************************************************************************************
    *******************************************************************************************************************/
    public Cell(Cell cpy)
    {
      x=cpy.x;
      y=cpy.y;
      MarkedForDeath=cpy.MarkedForDeath;
      left=cpy.left;
      top=cpy.top;
      cellColor=cpy.cellColor;
    }

    /*******************************************************************************************************************
    *******************************************************************************************************************/
    public bool MarkedForDeath { get; set; }
    
    /*******************************************************************************************************************
    *******************************************************************************************************************/
    public void Draw(Canvas world)
    {
      world.DrawSquare(cellColor,left,top,square_size);
    }

    /*******************************************************************************************************************
    *******************************************************************************************************************/
    public static Tuple<int,int> GetXYPositionFromWorldPoint(PointF worldPoint)
    {
      var center=new PointF(worldPoint.X,worldPoint.Y);
      if(center.Y>0.0f) center.Y+=size;
      if(center.X<0.0f) center.X-=size;
      var x=(int)(center.X/size);
      var y=(int)(center.Y/size);
      return new Tuple<int,int>(x,y);
    }
  }
}

// EOF *****************************************************************************************************************
